
import os
import unittest
from appium import webdriver
from time import sleep

class XfinityTests(unittest.TestCase):
    "Class to run tests against Xfinity Stream app"

    def setUp(self):
        "Setup for the test"
        desired_caps = {}
        desired_caps['platformName'] = 'Android'
        desired_caps['platformVersion'] = '4.4.2'
        desired_caps['deviceName'] = 'TV EVERYWHERE_Galaxy S4'
        #desired_caps['platformVersion'] = '4.4.4'
        #desired_caps['deviceName'] = 'Nexus 7'
        # Returns abs path relative to this file and not cwd
        desired_caps['app'] = os.path.abspath(
            os.path.join(os.path.dirname(__file__), '/Users/guest1/Downloads/xtv-comcast-5.0.0.014-master.apk'))
        desired_caps['appPackage'] = 'com.xfinity.cloudtvr'
        desired_caps['appActivity'] = 'com.xfinity.cloudtvr.view.BrowseActivity'
        self.driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
        self.driver.implicitly_wait(20)
        elem = self.driver.find_element_by_id('com.xfinity.cloudtvr:id/get_started_button')  # Get-Started Screen
        sleep(10)
        elem.click()
        self.driver.implicitly_wait(10)
        if self.driver.find_element_by_accessibility_id('Continue'):  # login - bypass
            self.driver.find_element_by_accessibility_id('Continue').click()  # login - regular
        else:
            self.driver.find_element_by_xpath('//android.view.View[@content-desc="USERNAME"]').send_keys(
                'x1_automation_04')
            self.driver.find_element_by_xpath('//android.view.View[@content-desc="PASSWORD"]').send_keys(
                'HomePlot9')
            self.driver.find_element_by_xpath('//android.widget.Button[@content-desc="Sign In"]').click()
        self.driver.implicitly_wait(100)
        self.driver.find_element_by_id('com.xfinity.cloudtvr:id/ftde_login_spinner')  # loading spinner
        self.driver.implicitly_wait(120)
        self.driver.find_element_by_id('android:id/button1').click()  # tos screen

    def test_linearplayback(self):
         """ Test to check linear playback """
         self.driver.implicitly_wait(10)
         self.driver.find_element_by_accessibility_id('Navigate up').click()#Hamburger
         sleep(10)
         # driver.implicitly_wait(10)
         self.driver.find_element_by_accessibility_id('all channels button').click() #opens TV Listing
         # sleep(20)
         self.driver.implicitly_wait(20)
         self.driver.find_element_by_id('com.xfinity.cloudtvr:id/channel_number').click() #plays a channel
         self.driver.implicitly_wait(50)
         self.driver.find_element_by_id('com.xfinity.cloudtvr:id/undercard_loading_animation') #loading playback
         self.driver.implicitly_wait(50)
         self.driver.find_element_by_id('com.xfinity.cloudtvr:id/play_pause_icon') #playback started
         sleep(50)
         print "Linear playback works"


    def test_recordingplayback(self):
        """ Test the recording playback """
        self.driver.implicitly_wait(10)
        self.driver.find_element_by_accessibility_id('Navigate up').click()  # Hamburger
        self.driver.implicitly_wait(15)
        self.driver.find_element_by_accessibility_id('all recordings button').click() #clicks recording button
        self.driver.implicitly_wait(20)
        self.driver.find_element_by_id('com.xfinity.cloudtvr:id/entity_title').click()
        self.driver.implicitly_wait(50)
        self.driver.find_element_by_id('com.xfinity.cloudtvr:id/metadata_view').click()
        self.driver.implicitly_wait(30)
        elements = self.driver.find_elements_by_id('com.xfinity.cloudtvr:id/action_button')
        for element in elements:
            if element.text == 'Watch':
                element.click()
                break
        resume_elements = self.driver.find_elements_by_id('com.xfinity.cloudtvr:id/action_button')
        for element1 in resume_elements:
            if element1.text == 'Resume':
                element1.click()
                break

        self.driver.implicitly_wait(70)
        self.driver.find_element_by_id('com.xfinity.cloudtvr:id/undercard_loading_animation') #loading playback
        self.driver.implicitly_wait(70)
        self.driver.find_element_by_id('com.xfinity.cloudtvr:id/player_seekbar') #playback started
        sleep(50)
        print "DVR plaback"

    def tearDown(self):
        "Tear down the test"
        self.driver.quit()

if __name__ == '__main__':
    unittest.main()
    # suite = unittest.TestLoader().loadTestsFromTestCase(XfinityTests)
    # unittest.TextTestRunner(verbosity=2).run(suite)
